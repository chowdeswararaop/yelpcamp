
<% layout('layouts/boilerplate') %> 

<div class="card mb-3" style="height: 500px;" id="map"></div>



<% for(let c of campgrounds){ %>
   <div class="card mb-3">
       <div class="row">
       <div class="col-md-4">
        <%if(c.images.length > 0){%> 
           <img width="300px" height="350px" class="img-fluid" src="<%=c.images[0].url%>  ">
           <%}else{%> 
           <img width="300px" height="350px" class="img-fluid" src="">
           <% } %> 

       </div id>
       <div class="col-md-8">
       <div class="card-body ">
           <h4 class="card-title"><%=c.title  %> </h4>
           <p class="card-text"><%=c.description  %> </p>
           <p class="card-text"><small><%=c.locations  %></small> </p>
           <a href="/campgrounds/<%=c.id%> " class="btn btn-primary"><%=c.title %> </a>
       </div>
       </div>
       </div>
   </div>
<% } %>  
<!-- /////////////////////////////// -->
<script>
    var mapToken="pk.eyJ1IjoiY2hvd2Rlc3dhcmFyYW8iLCJhIjoiY2trNmQ1Z3AzMDJ0NzJ1cDV3aWpnb3M3aiJ9.bVsAd0HA5a7aJJMFbD5NAQ"
    const campgrounds = { features: <%- JSON.stringify(campgrounds) %>}
  
    

mapboxgl.accessToken =mapToken;
var map = new mapboxgl.Map({
container: 'map',
style: 'mapbox://styles/mapbox/light-v10',
center:[-103.59179687498357, 40.66995747013945],
zoom: 3,

});


//Initialize the geolocate control.
var geolocate = new mapboxgl.GeolocateControl({
  positionOptions: {
      enableHighAccuracy: true
  },
  trackUserLocation: true
});
// Add the control to the map.
map.addControl(geolocate);
var nav = new mapboxgl.NavigationControl();
 map.addControl(nav, 'bottom-right');
map.on('load', function () {
// Add a new source from our GeoJSON data and
// set the 'cluster' option to true. GL-JS will
// add the point_count property to your source data.
map.addSource('campgrounds', {
type: 'geojson',
// Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
// from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
data:campgrounds,
cluster: true,
clusterMaxZoom: 14, // Max zoom to cluster points on
clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
});
 
map.addLayer({
id: 'clusters',
type: 'circle',
source: 'campgrounds',
filter: ['has', 'point_count'],
paint: {
// Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
// with three steps to implement three types of circles:
//   * Blue, 20px circles when point count is less than 100
//   * Yellow, 30px circles when point count is between 100 and 750
//   * Pink, 40px circles when point count is greater than or equal to 750
'circle-color': [
'step',
['get', 'point_count'],
               '#00BCD4',
                10,
                '#2196F3',
                30,
                '#3F51B5'
            ],
            'circle-radius': [
                'step',
                ['get', 'point_count'],
                15,
                10,
                20,
                30,
                25
]
}
});
 
map.addLayer({
id: 'cluster-count',
type: 'symbol',
source: 'campgrounds',
filter: ['has', 'point_count'],
layout: {
'text-field': '{point_count_abbreviated}',
'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
'text-size': 12
}
});
 
map.addLayer({
id: 'unclustered-point',
type: 'circle',
source: 'campgrounds',
filter: ['!', ['has', 'point_count']],
paint: {
'circle-color': '#11b4da',
'circle-radius': 4,
'circle-stroke-width': 1,
'circle-stroke-color': '#fff'
}
});
 
// inspect a cluster on click
map.on('click', 'clusters', function (e) {
var features = map.queryRenderedFeatures(e.point, {
layers: ['clusters']
});
console.log(e.features[0])
var clusterId = features[0].properties.cluster_id;
map.getSource('campgrounds').getClusterExpansionZoom(
clusterId,
function (err, zoom) {
if (err) return;
 
map.easeTo({
center: features[0].geometry.coordinates,
zoom: zoom
});
}
);
});
 
// When a click event occurs on a feature in
// the unclustered-point layer, open a popup at
// the location of the feature, with
// description HTML from its properties.
map.on('click', 'unclustered-point', function (e) {
const text=e.features[0].properties.popup;

var coordinates = e.features[0].geometry.coordinates.slice();


 
// Ensure that if the map is zoomed out such that
// multiple copies of the feature are visible, the
// popup appears over the copy being pointed to.
while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
}
 
new mapboxgl.Popup()
.setLngLat(coordinates)
.setHTML(
 text
)
.addTo(map);
});
 
map.on('mouseenter', 'clusters', function () {
map.getCanvas().style.cursor = 'pointer';
});
map.on('mouseleave', 'clusters', function () {
map.getCanvas().style.cursor = '';

});
});
console.log(campgrounds)
</script>

